// ArrayList challenge Road-map - PART 1 -> Contact class


// Create the contact Class: constructor, getters, static method to create record without having to intialize the class fields all the time
// with having to create object of Contacts all the time

/ ArrayList challenge Road-map - PART 2 -> MobilePhone class

//Create the MobilePhone Class: ArrayList of type Contact, constructor, initialize the ArrayList here
// methods: addNewContact(boolean) ->
// - check if the contact you're adding already exists (use the name for that)
// - if it does return false and an error message
// - if it doesn't, use a built-in method to add the contact and return true with a success message

// findContact(int) 1 -> return an integer representing the index of the element
// better to make this private cause we don't need to expose it

// findContact(int) 2 -> return an int but accept a String
// loop through the whole list
// extract the names from it
// compare it to the name you have passed
// return the index (int)
// if you don't find anything return a -1;

// updateContact(boolean) -> accept two String oldContact and newContact
// find the oldContact position
// check if exists
// if it doesn't, false, and message
// if it does, set() position and newContact message and true

// printContacts ->
// shoot a message like "Contact List"
// loop through the Array
// make sure to start from 1
// get name and phone number


// ArrayList challenge Road-map - PART 3 -> MobilePhone class

// queryContact() String -> this is like findContact() but it return a String instead of an integer(index)
// We have to put a little check to see if findContact() returns a number >=0
// If it does, it means the contact exists, and then we can return the name

// removeContact() boolean -> this is like update contact
// we check first if the contact record exists
// if it doesn't we return an error (not found)
// it does we remove the contact

// ArrayList challenge Road-map - PART 4 -> Runner class

// Create a Scanner to get input
// Create an object of MobilePhone
// Create a boolean variable
// Implement a method to simulate the boot animation of a mobile phone
// Implement a method to print out a menu of available actions
// The logic to activate the various methods corresponding to the various option on the menu
// can be handled by a while-loop that contains a switch
// It's best to start handling the skeleton of the loop and designing the methods while moving forward
// **methods in the switch**
// printContact() -> implemented in the MobilePhone class
// addContact() -> capture input from the keyboard, create a new contact record (use the static Contact method), pass it over to the addNewContact method in MobilePhone
// updateContact() -> print a message, capture the keyboard input, go to the MobileClass and create a new version of queryContact method that accepts a String
// call the new method while storing it in a variable, perform an IF check in case no name is found, print a message
// print a message to invite the user to enter the new contact name and phone and capture the input form the keyboard for both
// create a new record (use the static Contact method) with new name and new number
// call the updateContact method to update the record, and it would be better to put it inside an IF statement in case something goes wrong
// removeContact() -> it's gonna be very similar to the updateContact (copy first part entirely)
// queryContact() -> pretty much the same as the removeContact (copy all of it)
// printActions()

